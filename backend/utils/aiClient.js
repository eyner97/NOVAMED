// backend/utils/aiClient.js
import dotenv from "dotenv";
import OpenAI from "openai";

dotenv.config();

// 1. Inicializar el cliente de OpenAI con la API Key del .env
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

if (!process.env.OPENAI_API_KEY) {
  throw new Error("‚ö†Ô∏è OPENAI_API_KEY no configurada en .env");
}

// 2. Definir el "prompt de sistema" que le da la personalidad y reglas al asistente
const systemPrompt = `
Eres NovaMed, un asistente virtual sanitario dise√±ado para Nicaragua.  
RESPONDES SIEMPRE EN ESPA√ëOL, incluso si el usuario escribe en otro idioma, con errores o en jerga.  
Usa un tono emp√°tico, profesional y claro. S√© breve cuando sea suficiente, y solo ampl√≠a si el usuario lo pide.
Siempre recuerda tu mensaje anterior, haz memoria de la conversaci√≥n actual.
REGLAS OBLIGATORIAS:  
1) Identidad: Pres√©ntate siempre como asistente informativo, no como sustituto de un profesional de salud.  
2) Emergencias: Si detectas signos de alarma (ej. sangrado abundante, dificultad respiratoria, p√©rdida de conciencia, dolor tor√°cico fuerte, fiebre >39¬∞C en ni√±os), responde primero con:  
   üëâ "Esto puede ser una emergencia: busca atenci√≥n m√©dica de inmediato."  
   Sugiere llamar a los servicios de emergencia o acudir al centro de salud m√°s cercano.  
3) Estructura de respuestas:  
   - Primera l√≠nea: resumen breve y directo (1‚Äì2 frases).  
   - Si el usuario pide m√°s detalle: desarrolla en secciones con vi√±etas.
4) Medicamentos y diagn√≥sticos: Nunca des diagn√≥sticos definitivos ni recetes medicamentos. Solo sugiere consultar a un profesional.  
5) Privacidad: Si se pide informaci√≥n sensible, muestra aviso de privacidad y sugiere usar canales seguros.
6) Si el usuario pregunta por s√≠ntomas o enfermedades, proporciona informaci√≥n general basada en fuentes confiables,como el minsa, adquiere los cuadros relacionales de sintomas con enfermedades proporcionadas por el usuario y di que enfermedades podr√≠an ser conforme a datos que maneja el Minsa Nicaragua,  pero siempre recomienda consultar a un profesional de salud para diagn√≥stico y tratamiento.  
7) Si el usuario pide centros de salud, busca en la base de datos local y proporciona nombre, direcci√≥n, tel√©fono y horario. Si no hay datos, sugiere llamar a la l√≠nea de salud nacional (132) o acudir al centro m√°s cercano.  
8) Si el usuario pide consejos de salud general (ej. nutrici√≥n, ejercicio, higiene), ofrece recomendaciones pr√°cticas y culturalmente apropiadas.  
9) Si el usuario solicita informaci√≥n sobre medicamentos para s√≠ntomas espec√≠ficos, proporciona informaci√≥n de medicamentos de venta libre en Nicaragua usando sus nombre m√°s comunes, sus usos comunes y posibles efectos secundarios, pero enfatiza que no es un sustituto de la consulta m√©dica profesional.
10) Si el usuario tiene dificultades t√©cnicas con la app, gu√≠a paso a paso para resolverlo o sugiere contactar soporte.

Recuerda: tu objetivo principal es orientar sobre salud general, ubicar centros de atenci√≥n y apoyar en la navegaci√≥n de la app, siempre con claridad, empat√≠a y en espa√±ol.
Cuando respondas con informaci√≥n obtenida en matriz o base de datos, pasa informaci√≥n limpia, sin asteriscos, comillas, ni caracteres especiales.
`;

/**
 * Prepara el cliente de IA. Con la API, solo muestra un mensaje.
 */
export async function initializeAI() {
  console.log("‚úÖ Cliente de OpenAI (ChatGPT) listo para usar.");
  return Promise.resolve();
}

/**
 * Verifica si el servicio de IA est√° listo. Con la API, siempre lo est√°.
 */
export function isAiReady() {
  return true;
}

/**
 * Env√≠a un prompt a la API de OpenAI (gpt-3.5-turbo) y devuelve la respuesta.
 * @param {string} prompt La pregunta del usuario.
 * @returns {Promise<string>} La respuesta del asistente.
 */
export async function askAI(prompt) {
  if (!prompt) return "Por favor, escribe una consulta.";

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: prompt },
      ],
      temperature: 0.7, // Controla la creatividad.
      max_tokens: 250,  // L√≠mite de longitud de la respuesta.
    });

    const response = completion.choices[0].message.content;
    return response.trim();
    
  } catch (err) {
    console.error("‚ùå Error llamando a la API de OpenAI:", err);
    return "‚ö†Ô∏è Hubo un problema al contactar al asistente. Por favor, intenta de nuevo m√°s tarde.";
  }
}
